--[[
  ⢿⣿⣿⣿⣭⠹⠛⠛⠛⢿⣿⣿⣿⣿⡿⣿⠷⠶⠿⢻⣿⣛⣦⣙⠻⣿
  ⣿⣿⢿⣿⠏⠀⠀⡀⠀⠈⣿⢛⣽⣜⠯⣽⠀⠀⠀⠀⠙⢿⣷⣻⡀⢿
  ⠐⠛⢿⣾⣖⣤⡀⠀⢀⡰⠿⢷⣶⣿⡇⠻⣖⣒⣒⣶⣿⣿⡟⢙⣶⣮
  ⣤⠀⠀⠛⠻⠗⠿⠿⣯⡆⣿⣛⣿⡿⠿⠮⡶⠼⠟⠙⠊⠁⠀⠸⢣⣿
  ⣿⣷⡀⠀⠀⠀⠀⠠⠭⣍⡉⢩⣥⡤⠥⣤⡶⣒⠀⠀⠀⠀⠀⢰⣿⣿
  ⣿⣿⡽⡄⠀⠀⠀⢿⣿⣆⣿⣧⢡⣾⣿⡇⣾⣿⡇⠀⠀⠀⠀⣿⡇⠃
  ⣿⣿⣷⣻⣆⢄⠀⠈⠉⠉⠛⠛⠘⠛⠛⠛⠙⠛⠁⠀⠀⠀⠀⣿⡇⢸
  ⢞⣿⣿⣷⣝⣷⣝⠦⡀⠀⠀⠀⠀⠀⠀⠀⡀⢀⠀⠀⠀⠀⠀⠛⣿⠈
  ⣦⡑⠛⣟⢿⡿⣿⣷⣝⢧⡀⠀⠀⣶⣸⡇⣿⢸⣧⠀⠀⠀⠀⢸⡿⡆
  ⣿⣿⣷⣮⣭⣍⡛⠻⢿⣷⠿⣶⣶⣬⣬⣁⣉⣀⣀⣁⡤⢴⣺⣾⣽⡇
  Obfuscated with GGH | Protected with anti-tamper system
]]

-- GGH obfuscation with anti-tampering (designed for Roblox/Luau)
local y=getfenv or function()return _G end
local z={[16]=-29844,[106]=22624,[991]=25123,[8100]=-22664,[7135]=31245,[7724]=12543}
local function h(x)return z[x-4808]or 0 end
local d=function(x,k)
  if type(x)~="table"and type(x)~="string"then return""end
  if type(k)~="table"and type(k)~="string"and type(k)~="number"then return""end
  
  local b=y()["string"]["byte"]
  local s=y()["string"]["char"]
  local _=y()["table"]["concat"]
  local i=function(a,b)
    if a==0 or b==0 then return 0 end
    local r=0
    for j=0,31 do
      local x=a/2+b/2
      if x~=math.floor(x)then
        r=r+2^j
      end
      a=math.floor(a/2)
      b=math.floor(b/2)
      if a==0 and b==0 then break end
    end
    return r
  end
  
  -- Fallback for Luau
  if bit32 and bit32.bxor then i=bit32.bxor end
  if bit and bit.bxor then i=bit.bxor end
  
  local o={}
  if type(x)=="string"then
    for j=1,#x do 
      o[j]=b(x:sub(j,j))
    end
  else
    o=x
  end
  
  local p
  if type(k)=="string"then
    p={}
    for j=1,#k do 
      p[j]=b(k:sub(j,j))
    end
  elseif type(k)=="number"then
    p=k
  else
    p=k
  end

  local r={}
  for j=1,#o do
    if type(p)=="number"then
      r[j]=s(i(o[j],p))
    else
      r[j]=s(i(o[j],p[1+(j-1)%#p]))
    end
  end
  
  return _(r)
end

local x={147,147,108,213,89,83,92,80,59,116,108,2,89,50,80,89,116,147,80,71,77,59,108,101,53,98,71,92,104,108,113,71,104,68,108,83,107,80,104,71,92,80,59,108,62,107,86,53,104,71,89,86,101,108,47,86,56,108,104,47,50,80,59,101,108,80,89,53,47,80,108,252,80,47,119,59,98,101,108,195,108,65,47,83,59,186,225,59,104,5,59,98,110,71,53,59,132,114,252,80,47,119,59,98,101,114,135,108,80,89,53,47,80,108,240,89,53,47,80,252,80,47,119,59,98,108,195,108,252,80,47,119,59,98,101,150,240,89,53,47,80,252,80,47,119,59,98,108,108,80,89,53,47,80,108,207,86,104,71,219,116,92,80,89,71,104,108,195,108,125,131,108,207,86,104,71,219,116,92,80,89,71,104,150,219,86,47,50,80,59,56,108,195,108,104,98,107,59,108,207,86,104,71,219,116,92,80,89,71,104,150,243,47,116,234,107,83,92,228,59,71,65,68,104,108,195,108,171,156,108,207,86,104,71,219,116,92,80,89,71,104,150,243,47,116,17,47,80,77,5,92,59,59,56,108,195,108,159,156,156,108,108,62,107,86,53,104,71,89,86,108,207,86,104,71,219,116,92,80,89,71,104,186,216,59,104,59,53,104,5,92,59,59,56,228,47,53,77,132,92,80,47,119,59,98,135,108,108,108,108,108,80,89,53,47,80,108,53,68,47,98,47,53,104,59,98,108,195,108,92,80,47,119,59,98,150,213,68,47,98,47,53,104,59,98,108,108,108,108,108,71,62,108,53,68,47,98,47,53,104,59,98,108,47,86,56,108,53,68,47,98,47,53,104,59,98,186,222,71,86,56,222,71,98,101,104,213,68,71,80,56,132,114,228,107,83,47,86,89,71,56,114,135,108,104,68,59,86,108,108,108,108,108,108,108,108,108,80,89,53,47,80,108,68,107,83,47,86,89,71,56,108,195,108,53,68,47,98,47,53,104,59,98,150,228,107,83,47,86,89,71,56,108,108,108,108,108,108,108,108,108,71,62,108,68,107,83,47,86,89,71,56,150,17,47,80,77,5,92,59,59,56,108,198,108,101,59,80,62,150,243,47,116,17,47,80,77,5,92,59,59,56,108,104,68,59,86,108,108,108,108,108,108,108,108,108,108,108,108,108,98,59,104,107,98,86,108,104,98,107,59,108,108,108,108,108,108,108,108,108,59,86,56,108,108,108,108,108,59,86,56,108,108,108,108,108,98,59,104,107,98,86,108,62,47,80,101,59,108,59,86,56,108,108,62,107,86,53,104,71,89,86,108,207,86,104,71,219,116,92,80,89,71,104,186,216,59,104,59,53,104,222,80,119,228,47,53,77,132,92,80,47,119,59,98,135,108,108,108,108,108,80,89,53,47,80,108,53,68,47,98,47,53,104,59,98,108,195,108,92,80,47,119,59,98,150,213,68,47,98,47,53,104,59,98,108,108,108,108,108,71,62,108,53,68,47,98,47,53,104,59,98,108,47,86,56,108,53,68,47,98,47,53,104,59,98,186,222,71,86,56,222,71,98,101,104,213,68,71,80,56,132,114,228,107,83,47,86,89,71,56,2,89,89,104,252,47,98,104,114,135,108,104,68,59,86,108,108,108,108,108,108,108,108,108,80,89,53,47,80,108,98,89,89,104,252,47,98,104,108,195,108,53,68,47,98,47,53,104,59,98,150,228,107,83,47,86,89,71,56,2,89,89,104,252,47,98,104,108,108,108,108,108,108,108,108,108,71,62,108,98,89,89,104,252,47,98,104,150,252,89,101,71,104,71,89,86,150,23,108,198,108,101,59,80,62,150,243,47,116,234,107,83,92,228,59,71,65,68,104,108,104,68,59,86,108,108,108,108,108,108,108,108,108,108,108,108,108,98,59,104,107,98,86,108,104,98,107,59,108,108,108,108,108,108,108,108,108,59,86,56,108,108,108,108,108,59,86,56,108,108,108,108,108,98,59,104,107,98,86,108,62,47,80,101,59,108,59,86,56,108,108,147,147,108,231,86,71,104,71,47,80,71,122,59,108,47,86,104,71,147,59,116,92,80,89,71,104,108,101,119,101,104,59,83,108,80,89,53,47,80,108,62,107,86,53,104,71,89,86,108,231,86,71,104,207,86,104,71,219,116,92,80,89,71,104,132,135,108,108,108,108,108,92,98,71,86,104,132,114,207,86,104,71,147,59,116,92,80,89,71,104,108,101,119,101,104,59,83,108,71,86,71,104,71,47,80,71,122,59,56,114,135,108,108,108,108,108,62,89,98,108,41,144,108,92,80,47,119,59,98,108,71,86,108,92,47,71,98,101,132,252,80,47,119,59,98,101,186,225,59,104,252,80,47,119,59,98,101,132,135,135,108,56,89,108,108,108,108,108,108,108,108,108,71,62,108,207,86,104,71,219,116,92,80,89,71,104,186,216,59,104,59,53,104,5,92,59,59,56,228,47,53,77,132,92,80,47,119,59,98,135,108,104,68,59,86,108,108,108,108,108,108,108,108,108,108,108,108,108,92,98,71,86,104,132,114,216,59,104,59,53,104,59,56,108,101,92,59,59,56,108,68,47,53,77,108,62,98,89,83,108,114,108,150,150,108,92,80,47,119,59,98,150,246,47,83,59,135,108,108,108,108,108,108,108,108,108,59,86,56,108,108,108,108,108,108,108,108,108,71,62,108,207,86,104,71,219,116,92,80,89,71,104,186,216,59,104,59,53,104,222,80,119,228,47,53,77,132,92,80,47,119,59,98,135,108,104,68,59,86,108,108,108,108,108,108,108,108,108,108,108,108,108,92,98,71,86,104,132,114,216,59,104,59,53,104,59,56,108,62,80,119,108,68,47,53,77,108,62,98,89,83,108,114,108,150,150,108,92,80,47,119,59,98,150,246,47,83,59,135,108,108,108,108,108,108,108,108,108,59,86,56,108,108,108,108,108,59,86,56,108,59,86,56,108,108,147,147,108,5,104,47,98,104,108,83,89,86,71,104,89,98,71,86,65,108,231,86,71,104,207,86,104,71,219,116,92,80,89,71,104,132,135,108}
local k=12
y()["loadstring"](d(x,k))()